name: Deploy Pipeline

on:
  push:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  TERRAFORM_ACTION: apply
  GITHUB_USERNAME: kncloudproject
  REPOSITORY_NAME: application-codes
  WEB_FILE_ZIP: rentzone.zip
  WEB_FILE_UNZIP: rentzone
  FLYWAY_VERSION: 9.8.1

jobs:
  wait_for_approval:
    name: Manual Approval Required
    runs-on: ubuntu-latest
    environment:
      name: approval-gate  # requires manual approval
    steps:
      - name: Awaiting Manual Approval
        run: echo "Waiting for approval from kncloudproject."

  # Configure AWS Credentials 
  configure_aws_credentials:
    name: Configure AWS Credentials
    needs: wait_for_approval
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  # Build AWS Infrastructure
  deploy_aws_infrastructure:
    name: Build AWS Infrastructure
    needs: 
      - configure_aws_credentials
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac  # Sets working directory for all steps
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7

      - name: Run Terraform Initialize
        run: terraform init

      - name: Run Terraform Plan
        run: terraform plan -out=tfplan.out


      - name: Run Terraform Apply/Destroy
        run: terraform ${{ env.TERRAFORM_ACTION }} -auto-approve

      - name: Get Terraform Output Image Name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_NAME_VALUE=$(terraform output -raw image_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_NAME=$IMAGE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform Output Domain Name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          DOMAIN_NAME_VALUE=$(terraform output -raw domain_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "DOMAIN_NAME=$DOMAIN_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform Output RDS Endpoint
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          RDS_ENDPOINT_VALUE=$(terraform output -raw rds_endpoint | grep -Eo "^[^:]+" | tail -n 1)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output image tag
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          IMAGE_TAG_VALUE=$(terraform output -raw image_tag | grep -Eo "^[^:]+" | tail -n 1)
          echo "IMAGE_TAG=$IMAGE_TAG_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output private data subnet az1 id
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          PRIVATE_DATA_SUBNET_AZ1_ID_VALUE=$(terraform output -raw private_data_subnet_az1_id | grep -Eo "^[^:]+" | tail -n 1)
          echo "PRIVATE_DATA_SUBNET_AZ1_ID=$PRIVATE_DATA_SUBNET_AZ1_ID_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output runner security group id
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          RUNNER_SECURITY_GROUP_ID_VALUE=$(terraform output -raw runner_security_group_id | grep -Eo "^[^:]+" | tail -n 1)
          echo "RUNNER_SECURITY_GROUP_ID=$RUNNER_SECURITY_GROUP_ID_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output task definition name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          TASK_DEFINITION_NAME_VALUE=$(terraform output -raw task_definition_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "TASK_DEFINITION_NAME=$TASK_DEFINITION_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output ecs cluster name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ECS_CLUSTER_NAME_VALUE=$(terraform output -raw ecs_cluster_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ECS_CLUSTER_NAME=$ECS_CLUSTER_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output ecs service name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ECS_SERVICE_NAME_VALUE=$(terraform output -raw ecs_service_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ECS_SERVICE_NAME=$ECS_SERVICE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform Output Environment File Name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ENVIRONMENT_FILE_NAME_VALUE=$(terraform output -raw environment_file_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ENVIRONMENT_FILE_NAME=$ENVIRONMENT_FILE_NAME_VALUE" >> $GITHUB_ENV

      - name: Get Terraform output env file bucket name
        if: env.TERRAFORM_ACTION == 'apply'
        working-directory: ./iac
        run: |
          ENV_FILE_BUCKET_NAME_VALUE=$(terraform output -raw env_file_bucket_name | grep -Eo "^[^:]+" | tail -n 1)
          echo "ENV_FILE_BUCKET_NAME=$ENV_FILE_BUCKET_NAME_VALUE" >> $GITHUB_ENV

      - name: Print GITHUB_ENV contents
        run: cat $GITHUB_ENV

    outputs:
      terraform_action: ${{ env.TERRAFORM_ACTION }}
      image_name: ${{ env.IMAGE_NAME }}
      domain_name: ${{ env.DOMAIN_NAME }}
      rds_endpoint: ${{ env.RDS_ENDPOINT }}
      image_tag: ${{ env.IMAGE_TAG }}
      private_data_subnet_az1_id: ${{ env.PRIVATE_DATA_SUBNET_AZ1_ID }}
      runner_security_group_id: ${{ env.RUNNER_SECURITY_GROUP_ID }}
      task_definition_name: ${{ env.TASK_DEFINITION_NAME }}
      ecs_cluster_name: ${{ env.ECS_CLUSTER_NAME }}
      ecs_service_name: ${{ env.ECS_SERVICE_NAME }}
      environment_file_name: ${{ env.ENVIRONMENT_FILE_NAME }}
      env_file_bucket_name: ${{ env.ENV_FILE_BUCKET_NAME }}


# Create ECR Repository
  create_ecr_repository:
    name: Create ECR Repository
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Check if ECR Repository Exists
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
        run: |
          result=$(aws ecr describe-repositories --repository-names "${{ env.IMAGE_NAME }}" | jq -r '.repositories[0].repositoryName')
          echo "repo_name=$result" >> $GITHUB_ENV
        continue-on-error: true

      - name: Create ECR Repository
        env:
          IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
          REPO_NAME: ${{ env.repo_name }}

        run: |
          if [ "$REPO_NAME" != "$IMAGE_NAME" ] || [ -z "$REPO_NAME" ]; then
            echo "Repository doesn't exist. Creating $IMAGE_NAME ..."
            aws ecr create-repository --repository-name "$IMAGE_NAME"
          else
            echo "Repository $IMAGE_NAME already exists."
          fi

  # Start Self-Hosted EC2 Runner
  start_runner:
    name: Start Self-Hosted EC2 Runner
    needs: 
      - configure_aws_credentials
      - deploy_aws_infrastructure
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Check for Running EC2 Runner
        id : detect
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ec2-github-runner" "Name=instance-state-name,Values=running" --query 'Reservations[].Instances[].InstanceId' --output text)

          if [ -n "$instances" ]; then
            echo "instance_id=$instance_id" >> $GITHUB_OUTPUT
            echo "label=ec2-github-runner" >> $GITHUB_OUTPUT
            echo "runner_running=true" >> $GITHUB_OUTPUT
          else
            echo "runner_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Set Outputs from Existing Runner
        if: steps.detect.outputs.runner_running == 'true'
        id: setoutputs
        run: |
          echo "instance_id=${{ steps.detect.outputs.instance_id }}" >> $GITHUB_OUTPUT
          echo "label=${{ steps.detect.outputs.label }}" >> $GITHUB_OUTPUT

      - name: Start EC2 Runner (Only if Not Running)
        if: steps.detect.outputs.runner_running != 'true'
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-0f3f13f145e66a0a3
          ec2-instance-type: t2.micro
          subnet-id: ${{ needs.deploy_aws_infrastructure.outputs.private_data_subnet_az1_id }}
          security-group-id: ${{ needs.deploy_aws_infrastructure.outputs.runner_security_group_id }}
          aws-resource-tags: > 
            [
              {"Key": "Name", "Value": "ec2-github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
            ]
      - name: Set Outputs from Started Runner
        if: steps.detect.outputs.runner_running != 'true'
        run: |
          echo "instance_id=${{ steps.start-ec2-runner.outputs.ec2-instance-id }}" >> $GITHUB_OUTPUT
          echo "label=${{ steps.start-ec2-runner.outputs.label }}" >> $GITHUB_OUTPUT

    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label || steps.detect.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id || steps.detect.outputs.instance_id }}



# # Build and Push Docker Image to ECR
#   build_and_push_image:
#     name: Build & Push Docker Image to ECR
#     needs:
#       - configure_aws_credentials
#       - deploy_aws_infrastructure
#       - create_ecr_repository
#       - start_runner
#     if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Build Docker Image
#         env:
#           DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
#           RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
#           IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
#           IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
#         run: |
#           docker build \
#           --build-arg PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} \
#           --build-arg GITHUB_USERNAME=${{ env.GITHUB_USERNAME }} \
#           --build-arg REPOSITORY_NAME=${{ env.REPOSITORY_NAME }} \
#           --build-arg WEB_FILE_ZIP=${{ env.WEB_FILE_ZIP }} \
#           --build-arg WEB_FILE_UNZIP=${{ env.WEB_FILE_UNZIP }} \
#           --build-arg DOMAIN_NAME=${{ env.DOMAIN_NAME }} \
#           --build-arg RDS_ENDPOINT=${{ env.RDS_ENDPOINT }} \
#           --build-arg RDS_DB_NAME=${{ secrets.RDS_DB_NAME }} \
#           --build-arg RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }} \
#           --build-arg RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }} \
#           -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

#       - name: Get ECR Registry
#         id: ecr
#         run: echo "ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com" >> $GITHUB_ENV
#         env:
#           AWS_REGION: ${{ env.AWS_REGION }}

#       - name: Retag Docker Image
#         env:
#           IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
#           IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
#         run: |
#           docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

#       - name: Login to Amazon ECR
#         uses: aws-actions/amazon-ecr-login@v2
      
#       - name: Push Docker Image to Amazon ECR
#         env:
#           IMAGE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.image_name }}
#           IMAGE_TAG: ${{ needs.deploy_aws_infrastructure.outputs.image_tag }}
#         run: |
#           docker push "$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG"

#   # Create Environment File and Export to S3 
#   export_env_variables:
#     name: Create Environment File and Export to S3 
#     needs:
#       - configure_aws_credentials
#       - deploy_aws_infrastructure
#       - start_runner
#       - build_and_push_image
#     if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
#     runs-on: ubuntu-latest
#     steps:
#       - name: Export Environment Variable Values to File
#         env:
#           DOMAIN_NAME: ${{ needs.deploy_aws_infrastructure.outputs.domain_name }}
#           RDS_ENDPOINT: ${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}
#           ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
#         run: |
#           echo "PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}" > ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "GITHUB_USERNAME=${{ env.GITHUB_USERNAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "REPOSITORY_NAME=${{ env.REPOSITORY_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "WEB_FILE_ZIP=${{ env.WEB_FILE_ZIP }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "WEB_FILE_UNZIP=${{ env.WEB_FILE_UNZIP }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "DOMAIN_NAME=${{ env.DOMAIN_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "RDS_DB_USERNAME=${{ secrets.RDS_DB_USERNAME }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}
#           echo "RDS_DB_PASSWORD=${{ secrets.RDS_DB_PASSWORD }}" >> ${{ env.ENVIRONMENT_FILE_NAME }}

#       - name: Upload Environment File to S3
#         env:
#           ENVIRONMENT_FILE_NAME: ${{ needs.deploy_aws_infrastructure.outputs.environment_file_name }}
#           ENV_FILE_BUCKET_NAME: ${{ needs.deploy_aws_infrastructure.outputs.env_file_bucket_name }}
#         run: aws s3 cp ${{ env.ENVIRONMENT_FILE_NAME }} s3://${{ env.ENV_FILE_BUCKET_NAME }}/${{ env.ENVIRONMENT_FILE_NAME }}


  # # Migrate Data into RDS Database with Flyway
  # migrate_data:
  #   name: Migrate Data into RDS Database with Flyway
  #   needs:
  #     - deploy_aws_infrastructure
  #     - start_runner
  #     - build_and_push_image
  #   if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Download Flyway
  #       run: |
  #         wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/${{ env.FLYWAY_VERSION }}/flyway-commandline-${{ env.FLYWAY_VERSION }}-linux-x64.tar.gz | tar xvz && sudo ln -s `pwd`/flyway-${{ env.FLYWAY_VERSION }}/flyway /usr/local/bin 

  #     - name: Remove the Placeholder (sql) Directory
  #       run: |
  #         rm -rf flyway-${{ env.FLYWAY_VERSION }}/sql/

  #     - name: Copy the sql Folder into the Flyway Sub-Directory
  #       run: |
  #         cp -r sql flyway-${{ env.FLYWAY_VERSION }}/

  #     - name: Run Flyway Migrate Command
  #       env:
  #         FLYWAY_URL: jdbc:mysql://${{ needs.deploy_aws_infrastructure.outputs.rds_endpoint }}:3306/${{ secrets.RDS_DB_NAME }}
  #         FLYWAY_USER: ${{ secrets.RDS_DB_USERNAME }}
  #         FLYWAY_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
  #         FLYWAY_LOCATION: filesystem:sql
  #       working-directory: ./flyway-${{ env.FLYWAY_LOCATION }}
  #       run: |
  #         flyway -url=${{ env.FLYWAY_URL }} \
  #           -user=${{ env.FLYWAY_USER }} \
  #           -password=${{ env.FLYWAY_PASSWORD }} \
  #           -locations=${{ env.FLYWAY_LOCATION }} migrate

  # Stop the self-hosted EC2 runner
  stop_runner:
    name: Stop self-hosted EC2 runner
    needs:
      - configure_aws_credentials
      - deploy_aws_infrastructure
      - start_runner
      # - build_and_push_image
      # - export_env_variables
      # - migrate_data
    if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start_runner.outputs.label }}
          ec2-instance-id: ${{ needs.start_runner.outputs.ec2-instance-id }}


  # # Create new task definition revision
  # create_td_revision:
  #   name: Create new task definition revision
  #   needs: 
  #     - configure_aws_credentials
  #     - deploy_aws_infrastructure 
  #     - create_ecr_repository
  #     - start_runner
  #     - build_and_push_image
  #     - export_env_variables
  #     # - migrate_data
  #     - stop_runner
  #   if: needs.deploy_aws_infrastructure.outputs.terraform_action != 'destroy'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create new task definition revision
  #       env:
  #         ECS_FAMILY: ${{  }}
  #         ECS_IMAGE: ${{  }}:${{  }}
  #       run: |
  #         # Get existing task definition
  #         TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{  }})

  #         # update the existing task definition by performing the following actions:
  #         # 1. Update the `containerDefinitions[0].image` to the new image we want to deploy
  #         # 2. Remove fields from the task definition that are not compatibile with `register-task-definition` --cli-input-json
  #         NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE "${{  }}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

  #         # Register the new task definition and capture the output as JSON
  #         NEW_TASK_INFO=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")

  #         # Grab the new revision from the output
  #         NEW_TD_REVISION=$(echo "$NEW_TASK_INFO" | jq '.taskDefinition.revision')

  #         # Set the new revision as an environment variable
  #         echo "NEW_TD_REVISION=$NEW_TD_REVISION" >> $GITHUB_ENV

  #   outputs:
  #     new_td_revision: ${{  }}

